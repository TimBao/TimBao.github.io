<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[逝水流年]]></title>
  <link href="http://timbao.github.io/atom.xml" rel="self"/>
  <link href="http://timbao.github.io/"/>
  <updated>2015-04-22T11:40:32+08:00</updated>
  <id>http://timbao.github.io/</id>
  <author>
    <name><![CDATA[Tim Bao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015-04-22 VVDocuemnter-Xcode Plugin Could Not Work Correctly]]></title>
    <link href="http://timbao.github.io/blog/2015/04/22/xcode_plugin_VVDcoumentor-Xcode_modify_shortcut_key/"/>
    <updated>2015-04-22T00:00:00+08:00</updated>
    <id>http://timbao.github.io/blog/2015/04/22/xcode_plugin_VVDcoumentor-Xcode_modify_shortcut_key</id>
    <content type="html"><![CDATA[<blockquote><p><code>VVDocuemnter-Xcode</code> plugin 是xcode上非常好用的一个插件，尤其适合做sdk接口的lazy programer。最为一个标准的<code>懒人</code>，必备之神器之一。但是当我安装完后却发现无法使用。怪哉，奇哉！</p></blockquote>

<p>google 了一圈下来，没有任何收获。索性自己看看源码，再不济也可以调试下。（开源的好处在这时候体现的淋漓尽致.）</p>

<ul>
<li><p>运行自带Test, 没有问题。</p></li>
<li><p>打印Log，发现生成comments正常。</p></li>
<li><p>调试，终于发现了问题，下面三行代码，注意看comments <strong>Cmd+V, paste</strong>, 看到这里我突然想起来，我把paste的快捷键改成control＋V了，再往下看keyCode支持<code>command</code>, <code>alt</code>, <code>shift</code>, <code>control</code>四种组合键，默认为<code>command</code>， 修改为我自定义的<code>control</code>后，重新安装，重启xcode，果然okay。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Objective-C'><span class='line'><span class="c1">//Cmd+V, paste (If it is Dvorak layout, use &#39;.&#39;, which is corresponding the key &#39;V&#39; in a QWERTY layout)</span>
</span><span class='line'><span class="bp">NSInteger</span> <span class="n">kKeyVCode</span> <span class="o">=</span> <span class="p">[[</span><span class="n">VVDocumenterSetting</span> <span class="n">defaultSetting</span><span class="p">]</span> <span class="n">useDvorakLayout</span><span class="p">]</span> <span class="o">?</span> <span class="nl">kVK_ANSI_Period</span> <span class="p">:</span> <span class="n">kVK_ANSI_V</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">kes</span> <span class="nl">sendKeyCode</span><span class="p">:</span><span class="n">kKeyVCode</span> <span class="nl">withModifierCommand</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">alt</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">shift</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">control</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>通过解决这个插件的问题，我知道了plugin的结构，了解了如何调试plugin，最终也解决了自己的问题。所获丰富，有时候问题是使自身进步最好的导火线！珍惜错误把！</p></blockquote>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2015/04/22/xcode_plugin_VVDcoumentor-Xcode_modify_shortcut_key/'>http://timbao.github.io/blog/2015/04/22/xcode_plugin_VVDcoumentor-Xcode_modify_shortcut_key/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-04-07 Summary Reports]]></title>
    <link href="http://timbao.github.io/blog/2015/04/07/Summary%20Reports/"/>
    <updated>2015-04-07T00:00:00+08:00</updated>
    <id>http://timbao.github.io/blog/2015/04/07/Summary Reports</id>
    <content type="html"><![CDATA[<blockquote><p>截止4月3日，我来到新公司的第一个项目在一片混乱和加班声中落下了帷幕。这可能是我参加工作至今参加的最最混乱的一个项目。所以有必要整理下思路，将项目中的有缺点(主要是缺点:）)总结纪录下，为自己也为他人提供一个参考。</p></blockquote>

<p>我将问题分为几类，按照软件工程来分吧，反正每个阶段都有一些问题。</p>

<p>一、需求方面主要遇到的问的：</p>

<ul>
<li><p>需求不明确: 项目已经开始一周，需求还没敲定。</p></li>
<li><p>需求变更频繁: 常常是到测试阶段了，需求还会变化。大boss竟然也会提需求，而且还是必须得实现。</p></li>
<li><p>需求在QQ中讨论: 在qq群里讨论需求，导致得后果就是开发不知道需求，或者是很快就忘了。</p></li>
<li><p>没有及时更新到文档上: 没有专门的需求文档和设计文档，有也是非常旧的版本，没有及时更新。</p></li>
</ul>


<p>二、UI设计</p>

<ul>
<li><p>UI设计原型图修改后不会及时更新。</p></li>
<li><p>效果图不准确，也没有及时更新。</p></li>
<li><p>标注图同上。</p></li>
<li><p>UI没有统一的标准，光颜色值就各自定义各自的。</p></li>
</ul>


<p>三、代码管理</p>

<ul>
<li><p>代码没有标准。看工程中的代码，各式各样。</p></li>
<li><p>没有code review。经常会导致代码覆盖或者是很简单的错误出现。</p></li>
<li><p>没有CI，全靠手工打包。效率极低。</p></li>
<li><p>模块划分不明确。</p></li>
<li><p>业务逻辑和UI逻辑混在一起，无法维护和测试。</p></li>
<li><p>无用代码或者无用的文件都混在一起，导致工程很混乱。相同定义出现多次。</p></li>
<li><p>后台和前端周期安排不合理，经常前端做完后，后台接口还未完成。非常耽误进度。</p></li>
</ul>


<p>四、测试</p>

<ul>
<li><p>没有Test cases.</p></li>
<li><p>Bug系统不支持Mac OS.</p></li>
<li><p>测试没有规范及周期，完全依赖研发，测试过程比较混乱，版本追踪困难。</p></li>
</ul>


<p>五、其他：</p>

<ul>
<li><p>项目周期制定拍脑门，不是根据具体需求细化后，根据每个feature的时间预估周期，而是指定死时间，在过程中不论需求如何变化，人员如何变化，周期永远不变化。也就是说一点风险控制的意识都没有。</p></li>
<li><p>项目管理没有风险控制和变更控制。</p></li>
<li><p>开发完全无法参与时间制定。</p></li>
</ul>


<blockquote><p>总之，问题很多，不局限我上面所列出的问题。有问题不可怕，可怕的是认识不到问题。从我来到项目结束，除了我及另外一个新来的同事提出过这样做不行，其他人都麻木了。每次我提出问题，总是会说习惯就好，
  忍忍就过去了。这不是做事都态度！也不是我做事的准则。我来就是为了锻炼自己能力的，解决这些问题也是我的工作，所以我必须要改变这种状况才行。</p></blockquote>

<p>  很多问题肯定无法一下子解决，所以我将问题分两部分：1，是可以开发内部解决的问题。2，是需要其他部门一起改进的。</p>

<p>对于内部:
  1. 我首先使用Jenkins搭建了自动build系统，增加版本号自动增加，将build和版本号对应起来。解决测试问题无法追踪版本及开发手动打包效率低问题。
  2. 使用MVVM模式替换原来的MVC模式，分离business logic和UI logic。
  3. 统一使用宏定义替换magic number。
  4. 建议需求和UI统一管理一份（svn），避免需求和理解的混乱。</p>

<p>对于合作：
  1. 积极提出改进建议：如UI规范统一。
  2. 接口文档及时更新。
  3. 测试统一依据效果图。
  4. 对需求变化进行把控。（好像没有效果）</p>

<p>  虽然当前项目没有太大的改进，但是在开发方面还是有很大的进步的。坚持好的习惯或者好的规范，也要有好的方法去推进。最近又将《软件作坊》这本书重新翻开，理论联系实践，理解的更加深刻。不论是对自己还是对公司都是又一些贡献。相当于双赢的局面。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2015/04/07/Summary%20Reports/'>http://timbao.github.io/blog/2015/04/07/Summary%20Reports/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-03-06 Solve Jenkins Build Xcode Project Could Not Found Provision Issue]]></title>
    <link href="http://timbao.github.io/blog/2015/03/06/Solve%20Jenkins%20build%20xcodeproject%20could%20not%20found%20provision%20issue/"/>
    <updated>2015-03-06T00:00:00+08:00</updated>
    <id>http://timbao.github.io/blog/2015/03/06/Solve Jenkins build xcodeproject could not found provision issue</id>
    <content type="html"><![CDATA[<p>The error is:
Code Sign error: No matching provisioning profile found</p>

<p>How to solve:</p>

<p>1-Ensure the project is building successfully from Xcode to real target.</p>

<p>2-Copy all the development cretificates &amp; credentials form your user folder to the system folder in KeyChain.</p>

<p>3-Copy all the Provisioning profiles existing in Users/<user>/Library/MobileDevice/Provisioning Profiles to /System/Library/MobileDevice/Provisioning Profiles.</p>

<p>If the directory is not exist, please create first.</p>

<p>参考：
<a href="https://issues.jenkins-ci.org/browse/JENKINS-20916">https://issues.jenkins-ci.org/browse/JENKINS-20916</a></p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2015/03/06/Solve%20Jenkins%20build%20xcodeproject%20could%20not%20found%20provision%20issue/'>http://timbao.github.io/blog/2015/03/06/Solve%20Jenkins%20build%20xcodeproject%20could%20not%20found%20provision%20issue/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015-02-10 为什么要从一个舒适的工作环境中离开]]></title>
    <link href="http://timbao.github.io/blog/2015/02/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BB%8E%E4%B8%80%E4%B8%AA%E8%88%92%E9%80%82%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E7%A6%BB%E5%BC%80/"/>
    <updated>2015-02-10T16:48:00+08:00</updated>
    <id>http://timbao.github.io/blog/2015/02/10/为什么要从一个舒适的工作环境离开</id>
    <content type="html"><![CDATA[<h2>我为什么要从一个舒适的工作环境中离开</h2>

<blockquote><p>今早乘坐7点06分点轻轨，我踏上了一天工作点旅程。中途在天津站倒车的时候，我看着屏幕上点时间7点23分，多么早啊。一个礼拜之前，这个时间我才刚刚起床，8点06分点轻轨让我轻松在9点一刻之前到达公司。为什么我要换个工作找罪受啊？我陷入深深点思考！我到底来这里要干什么？是仅仅为了赚更多点工资么？</p></blockquote>

<p>经过一路点思考，我想我找到来答案。那就是要突破，要变的更强。在这个不太正规的公司，我到底能学到什么？我觉得应该是学以致用，把前几年积累的知识在这里用上，要在实践中出真知。只有实践才是检验我前段时间段成果。正好在这里可以发挥我的这些。一个不太正规的公司意味着更多的机会和挑战。</p>

<p>好吧，有了这个理由，我的心情就轻松很多，有了目标，下一步就是执行了，这恰恰是我的强项。加油吧！不是少年的少年！</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2015/02/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BB%8E%E4%B8%80%E4%B8%AA%E8%88%92%E9%80%82%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E7%A6%BB%E5%BC%80/'>http://timbao.github.io/blog/2015/02/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BB%8E%E4%B8%80%E4%B8%AA%E8%88%92%E9%80%82%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E7%A6%BB%E5%BC%80/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工欲善其事，必先利其器]]></title>
    <link href="http://timbao.github.io/blog/2014/11/06/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    <updated>2014-11-06T00:07:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/11/06/工欲善其事，必先利其器</id>
    <content type="html"><![CDATA[<blockquote><p>背景：最近一直在写些python脚本，同事review完发现一处地方不符合pep8规范，建议修改。</p></blockquote>

<p>虽说是一处小小的改动，只要一分钟就可以搞定。但是我想下次会不会还犯这种错误？如何能一劳永逸解决这个问题？由于本人用vim作为python IDE，所以就去google了下是否有对python规范检查的插件，结果果然如我所料！万能的vim插件无所不能啊！因为早先已经用了syntastic插件检测语法，所以还是选择使用它来搭配pep8检测python规范。具体方法网上很多，这里不详细描述，感兴趣的可以自行google。</p>

<p>花了几个小时搞定好配置后，果然效果不错！为后面大量代码改动节约了不少时间，而且代码质量也提高不少！花费时间完全值得！这就是所谓的磨刀不误砍柴工。
有对vim感兴趣的同学，可以去我的<a href="https://github.com/TimBao/dotvim">github</a>看看我的配置。欢迎交流。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2014/11/06/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/'>http://timbao.github.io/blog/2014/11/06/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串相关函数整理]]></title>
    <link href="http://timbao.github.io/blog/2014/10/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <updated>2014-10-30T00:34:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/10/30/字符串相关函数整理</id>
    <content type="html"><![CDATA[<h2>string.h 中字符串相关函数</h2>

<h3>按功能分类:</h3>

<ul>
<li>字符串连接:

<ul>
<li>strcat : char<em> strcat(char</em> destination, const char* source);</li>
<li>strncat : char<em> strcat(char</em> destination, const char* source, size_t num);

<blockquote><p>cat 意思是catenate，连接的意思。
strnca 是strcat的安全版本，可以防止越界。
从定义上可以看出是将带const的字符串连接到不带const的字符串上。</p></blockquote></li>
</ul>
</li>
<li>字符/字符串查找:

<ul>
<li>strchr : char<em> strchr(const char</em> str, int character); char<em> strchr(char</em> str, int character);

<blockquote><p>查找字符character在str中第一次出现的位置，返回一个指针指向该字符到字符串结尾。
由于&#8217;\0&#8217;也是字符串的一部分，故该函数也可以查找结束符。
chr意思应该是character。</p></blockquote></li>
<li>strrchr : char<em> strchr(const char</em> str, int character); char<em> strchr(char</em> str, int character);

<blockquote><p>最后一次出现的位置。 &lsquo;r&#8217;应该是right的意思，也就是从右开始搜索。</p></blockquote></li>
<li>strpbrk : const char<em> strpbrk(const char</em> str1,const char<em> str2); char</em> strpbrk(char<em> str1,const char</em> str2);

<blockquote><p>查找str2中任意字符在str1中第一次出现的位置，返回从整个位置到str1最后的字符串。不包含结束符。</p></blockquote></li>
<li>strcspn : size_t strcspn(const char<em> str1, const char</em> str2);

<blockquote><p>返回的是str1第一次出现str2中任意字符的位置。搜索包含null结束符，所以函数可以返回str1字符串的长度当没有任何匹配的时候。</p></blockquote></li>
<li>strstr : const char<em> strstr(const char</em> str1, const char<em> str2); char</em> strstr(char<em> str1, const char</em> str2);

<blockquote><p>匹配完整字符串</p></blockquote></li>
</ul>
</li>
<li>字符串比较:

<ul>
<li>strcmp: int strcmp(const char<em> str1, const char</em> str2);</li>
<li>strncmp: int strcmp(const char<em> str1, const char</em> str2, size_t num);</li>
<li>strcoll: int strcoll(const char<em> str1, const char</em> str2);

<blockquote><p>根据LC_COLIATE比较str1和str2。</p></blockquote></li>
</ul>
</li>
<li>字符串拷贝:

<ul>
<li>strcpy : char<em> strcpy(char</em> destination, const char* source);</li>
<li>strncpy : char<em> strcpy(char</em> destination, const char* source, size_t num);

<blockquote><p>拷贝source到destination中去。遇到&#8217;\0&#8217;停止copy。</p></blockquote></li>
</ul>
</li>
<li>获取字符串长度:

<ul>
<li>strlen: size_t strlen(const char* str);</li>
</ul>
</li>
<li>拆分字符串:

<ul>
<li>strtok: char<em> strtok(char</em> str, const char* delimiters);

<blockquote><p>tok的意思是token，该函数就是将str根据delimiter拆分。</p></blockquote></li>
</ul>
</li>
</ul>


<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2014/10/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/'>http://timbao.github.io/blog/2014/10/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK帮助文档的一个小错误]]></title>
    <link href="http://timbao.github.io/blog/2014/03/19/Android%20NDK%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%94%99%E8%AF%AF/"/>
    <updated>2014-03-19T04:26:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/03/19/Android NDK帮助文档的一个小错误</id>
    <content type="html"><![CDATA[<blockquote><p>刚刚在调试如何不安装<code>Cgywin</code>的情况下，利用<code>NDK</code>编译<code>cocos2d-x</code>的SampleGame.却机缘巧合的情况下发现了<code>android-ndk-r8d</code>的<em>docs/IMPORT-MODULE.html</em>下的一个小bug。</p></blockquote>

<p>  在Eclipse中导入工程后，工程目录如下：
  <img src="http://img.blog.csdn.net/20140318204030468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ29vZg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" /></p>

<ul>
<li><p>将工程转换为C++工程。这步不会的可以google下。</p></li>
<li><p>设置ndk目录。
<img src="http://img.blog.csdn.net/20140318204205890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ29vZg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" /></p></li>
<li>设置<code>NDK_MODULE_PATH</code>环境变量。
<img src="http://img.blog.csdn.net/20140318204205890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ29vZg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="iamge" /></li>
</ul>


<p> 在docs/IMPORT-MODULE.html中的介绍：</p>

<blockquote><p>I.NDK_MODULE_PATH: The NDK_MODULE_PATH variable must contain a list of directories. Due to GNU Make limitations, NDK_MODULE_PATH must not contain any space. The NDK will complain if this is not the case. Use &lsquo;:&rsquo; as the path separator. On Windows, use &lsquo;/&rsquo; as the directory separator.</p></blockquote>

<p> 这里面说的Use &lsquo;:&rsquo; as the path separator, 经过实践验证在windows平台路径应该是使用;分割.</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2014/03/19/Android%20NDK%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%94%99%E8%AF%AF/'>http://timbao.github.io/blog/2014/03/19/Android%20NDK%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%94%99%E8%AF%AF/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员不是操作工]]></title>
    <link href="http://timbao.github.io/blog/2014/03/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E6%98%AF%E6%93%8D%E4%BD%9C%E5%B7%A5/"/>
    <updated>2014-03-09T18:35:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/03/09/程序员不是操作工</id>
    <content type="html"><![CDATA[<blockquote><p>故事的背景是这样的，我的一个朋友跟我聊天中说到他前几天加班到凌晨，手都疼了。我就问问加班干什么呢？他说就光<code>Ctrl-C</code>和<code>Ctrl-V</code>的弄了3000多次！我的天啊！怪不得手指头都疼了呢！</p></blockquote>

<p>  真正的程序员真的不是代码工人，是靠脑力而不是靠体力，是赚智慧的钱，而不是赚苦力的钱。那么真正的程序员应该怎么做呢？</p>

<ul>
<li><p>避免重复劳动，遇到类似需要大量<code>Ctrl-C</code>和<code>Ctrl-V</code>的情况，一定是程序架构出了问题，该做的公司是要思考为什么会出现这种不合理的情况？要从根本上杜绝这类情况的出现。</p></li>
<li><p>善于利用脚本，脚本语言的简单和易用性是程序员工作中不可缺少的好帮手。善于用脚本创造各种工具来帮助程序员提高工作效率。上述情况完全可以写个脚本来做这些重复的工作。而且后期可以将脚本完善，做成个通用的工具，分享给同事，即利己也利团队，更可以增加你在领导眼里的不可替代性。</p>

<p>现在的程序员门槛已经非常低了，但是不能因为门槛低就对自己要求降低。程序员不是码农，不是代码蓝领！我们是在改变世界，是高科技工程师！让我们做真正的程序员，而不是代码操作工！</p></li>
</ul>


<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2014/03/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E6%98%AF%E6%93%8D%E4%BD%9C%E5%B7%A5/'>http://timbao.github.io/blog/2014/03/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E6%98%AF%E6%93%8D%E4%BD%9C%E5%B7%A5/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析移动开发]]></title>
    <link href="http://timbao.github.io/blog/2014/03/02/%E6%B5%85%E6%9E%90%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <updated>2014-03-02T05:14:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/03/02/浅析移动开发</id>
    <content type="html"><![CDATA[<p>   这里只介绍笔者开发过的几个平台（iPhone, Android, Windows phone, Blackberry）。将从以下几个角度进行介绍：
<em>. 开发语言
</em>. IDE
<em>. 模拟器
</em>. 编译及调试
*. 开发成本</p>

<p>   开发语言</p>

<p>   ● <code>iPhone</code>：Object-C, C/C++</p>

<p>   ● <code>Android</code>：XML, java, C/C++(NDK)</p>

<p>   ● <code>WP</code>：XAML, C#, C++/CX</p>

<p>   ● <code>BlackBerry</code>：KML, C/C++</p>

<pre><code>可以分成两类：

一是iPhone；

二是其他三种。前者是完全native开发，并且只能在Mac OS X下开发（尽管现在有Xamarin但其跟官方API同步问题是个大问题）；而其他三类，可以看出来，前端都使用类XML的语言开发UI，后端采用各自的开发语言，当然也可以使用native开发，但从目前来看对native的支持都不如原生语言支持的好。

IDE
</code></pre>

<p>   ● <code>iPhone</code>： 首推<code>XCode</code>。</p>

<p>   ● <code>Android</code>：<code>Eclipse</code>目前还是主流；谷歌目前推出的<code>Adroid Studio</code>市场还未打开，以后不好说。</p>

<p>   ● <code>Widnows Phone</code>：<code>Visual Studio</code>是不二人选啊！</p>

<p>   ● <code>BlackBerry</code>：自带IED，是将<code>Eclipse</code>及所需插件打包到一起的一个IDE，可以归到<code>Eclipse</code>一类。</p>

<pre><code> 从IDE的易用性和功能性来看，Visual Studio是当之无愧的第一名，xcode应该说是紧随其后，两个IDE都非常强大，但是xcode会有随机的crash，稳定性上还是不如Visual Studio，而且VS可以调试C#和C/C++，而eclipse调试native上非常麻烦，不是三言两语可以说明白的，有感兴趣的童鞋可以去网上找找。至于BlackBerry的IDE集成的插件还可以，调试native代码也还行，功能也比较强大，但是在调试的速度上实在是无法忍受。
</code></pre>

<p>   模拟器
    xcode的模拟器和WP的模拟器安装都是随SDK安装的，使用起来非常方便。而android的模拟器和Blackberry的模拟器笔者没用过，但是BlackBerry的模拟器安装却非常麻烦，又得折腾VM使用起来还经常断开，所以说在后两者上有条件还是真机调试的比较好。
   编译及调试</p>

<p>   ● <code>XCode</code>：可以同时调试<code>Objective-C</code>和<code>C/C++</code>，编译速度还算比较快。</p>

<p>   ● <code>Visual Studio</code>：如此强大的IDE，同时调试<code>C#</code>和<code>C/C++</code>。</p>

<p>   ● <code>Android</code>：如果是java代码，速度和调试都挺方便的，但是如果想编译和调试native代码，那就需要有足够的耐心了，尤其是调试，配置之麻烦当属第一。</p>

<p>   ● <code>BlackBerry</code>：编译速度十分慢，调试启动也很慢，但是启动后调试还可以接受的，比起android来，省去了很多配置的麻烦。</p>

<p>   开发成本</p>

<p>   ● iPhone：投资比较大，光是注册开发者账号就需要99刀，而且还需要一台苹果设备，属于高富帅玩法。</p>

<p>   ● Windows Phone：投资一般，只用花注册的钱（如果要是用盗版VS的话），光VS的投资也不是小数。</p>

<p>   ● Adnroid：投资小，只需要一台PC和一台Android手机即可。可谓是专门给屌丝开发者准备的。</p>

<p>   ● BlackBerry：不熟悉，目前国内做的太少，而且BB10也没有在国内发售呢。</p>

<p>   总的来说，做为一名移动开发者来说，如果没有一定的经济实力的话还是选择iPhone开发比较好，至少在经济收入上更可观一些；但是目前的情形上来说，安卓的市场是越来越大，说明做安卓的开发前途至少会越来越光明。至于WP，目前还需要观望；至于BB，就算了吧。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2014/03/02/%E6%B5%85%E6%9E%90%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/'>http://timbao.github.io/blog/2014/03/02/%E6%B5%85%E6%9E%90%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源小游戏-基于android Sample Snake]]></title>
    <link href="http://timbao.github.io/blog/2014/01/16/%E5%BC%80%E6%BA%90%E5%B0%8F%E6%B8%B8%E6%88%8F-%E5%9F%BA%E4%BA%8Eandroid%20sample%20snake/"/>
    <updated>2014-01-16T00:51:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/01/16/开源小游戏-基于android sample snake</id>
    <content type="html"><![CDATA[<p>  最近利用业余时间学校android应用的开发，发现android sdk的sample中有个snake的小游戏，感觉不错，但是由于该游戏不能在触摸屏上玩，所以就萌生了自己动手的想法。利用2天时间又增加了用户排名和帮助等功能。程序已经托管到github上面，咱也玩吧开源。
  <a href="https://github.com/TimBao/Android_Snake">地址:https://github.com/TimBao/Android_Snake</a>
  有感兴趣的朋友可以一同开发噢！</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2014/01/16/%E5%BC%80%E6%BA%90%E5%B0%8F%E6%B8%B8%E6%88%8F-%E5%9F%BA%E4%BA%8Eandroid%20sample%20snake/'>http://timbao.github.io/blog/2014/01/16/%E5%BC%80%E6%BA%90%E5%B0%8F%E6%B8%B8%E6%88%8F-%E5%9F%BA%E4%BA%8Eandroid%20sample%20snake/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对比国内外的git开源项目]]></title>
    <link href="http://timbao.github.io/blog/2013/11/01/%E5%AF%B9%E6%AF%94%E5%9B%BD%E5%86%85%E5%A4%96%E7%9A%84git%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <updated>2013-11-01T04:53:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/11/01/对比国内外的git开源项目</id>
    <content type="html"><![CDATA[<p> 最近看到CSDN也有了自己的code(git)，而且开源中国比之还早有git@ocs，这两个基本是跟github差不多，或者说是copy github。这里不说他们到底是谁copy谁，只单单谈谈里面到项目。浏览里一边C/C++的项目，发现CSDN到大多说都是垃圾项目，而且基本都不怎么维护，着实让人失望。相比ocs到还好一点，但多数项目也是为了凑数，维护人员基本都没有维护，真是很可惜。开源在中国这个土壤上说的比做的好，唱的比干到好！失望！失望！</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/11/01/%E5%AF%B9%E6%AF%94%E5%9B%BD%E5%86%85%E5%A4%96%E7%9A%84git%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/'>http://timbao.github.io/blog/2013/11/01/%E5%AF%B9%E6%AF%94%E5%9B%BD%E5%86%85%E5%A4%96%E7%9A%84git%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK之JNI陷阱]]></title>
    <link href="http://timbao.github.io/blog/2013/10/01/Android%20NDK%E4%B9%8BJNI%E9%99%B7%E9%98%B1/"/>
    <updated>2013-10-01T05:54:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/10/01/Android NDK之JNI陷阱</id>
    <content type="html"><![CDATA[<blockquote><p>背景： 最近一个月一直在做移植库的工作，将c代码到share library移植到Android平台。这就涉及到Android NDK(native develop kit)内容。这里只想记录下JNI(java native interface)经常遇到到问题。</p></blockquote>

<p>  问题1.  忘记delete local reference。带New到方法(如：NewByteArray)这样到方法比较好辨认，需要手动调用DeleteLocalRef()来释放(返回值除外)。比较特殊的一个方法是：GetByteArrayELement必须要调用ReleaseByteArrayElements进行释放。当然如果你只是取bytearray中到byte，那么完全可以用GetByteArrayRegion实现。</p>

<p>  问题2. 没有NewGlobalRef。 在不同线程调用java方法，需要保存jobject对象，这时需要对jobject对象做全局引用，否则会失效。</p>

<p>  问题3.  jbytearray的length。在JNI layer获取到jbytearray到长度是不对到，应该由java获取byte[]的length再传给C layer。否则C layer有可能获得到是乱码。</p>

<p>  问题4.  线程问题。 不同线程使用JNIEnv*对象，需要AttachCurrentThread将env挂到当前线程，否则无法使用env。</p>

<p>  问题5.  javap 命令是对java的class文件操作；而javah命令需要在包名到上一层路径运行才行，否则无法生成.h文件。</p>

<p>  问题6. 尽量避免频繁调用JNI或者是使用JNI传输大量到数据。</p>

<p>  问题7. Reference Table overflow (max=1024) 或者是 Reference Table overflow (max=512)一定是因为忘记释放global reference或者local reference，请仔细检查代码。</p>

<p>  问题8. 不要在windows下使用cygwin编译NDK code，那样会遇到arguments too long问题，因为windows路径长度有限制导致。虽然可以使用subst将路径映射为短路径，但是在编译时间和调试上，windows到孩子都是伤不起。同样到build，在windows下要15分钟左右，而在mac下只要5分多，相差3倍。调试JNI 代码到速度更是不用提了，差太多。</p>

<p>  <em>总结</em>，JNI代码量其实不是很多，JNI作为一个数据传输层，它到作用仅仅是java和c直接到桥梁，但是如果处理不好将会是灾难，调试和找bug非常困难。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/10/01/Android%20NDK%E4%B9%8BJNI%E9%99%B7%E9%98%B1/'>http://timbao.github.io/blog/2013/10/01/Android%20NDK%E4%B9%8BJNI%E9%99%B7%E9%98%B1/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Std::vector 两种操作的比较]]></title>
    <link href="http://timbao.github.io/blog/2013/07/07/stdvector%20%E4%B8%A4%E7%A7%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <updated>2013-07-07T01:27:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/07/07/stdvector 两种操作的比较</id>
    <content type="html"><![CDATA[<ul>
<li>swap</li>
<li>assign

<blockquote><p> 这里只想说明这二种操作的用处和效率。swap和assign都可以用在将一个vector的内容全部复制给另外一个vector，区别是swap会改变源vector，而assign会清空目的vector后再将源vector的值全部插入到目的vector中。就效率而言，swap只是交换vector的头指针，时间复杂度是常数；而assigin时间复杂度则是线性。</p></blockquote></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &quot;DebugUtility.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Swap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&amp;</span> <span class="n">source</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&amp;</span> <span class="n">dest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">DebugUtility</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dest</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">source</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Assign</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&amp;</span> <span class="n">source</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&amp;</span> <span class="n">dest</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">DebugUtility</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dest</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">source</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">source</span><span class="p">(</span><span class="mi">900000</span><span class="p">,</span> <span class="s">&quot;90&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">destination</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Swap</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">destination</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//source.clear();</span>
</span><span class='line'>    <span class="c1">//for_each(destination.begin(), destination.end(), print);</span>
</span><span class='line'>    <span class="c1">//Assign(source, destination);</span>
</span><span class='line'>    <span class="c1">//source.clear();</span>
</span><span class='line'>    <span class="c1">//for_each(destination.begin(), destination.end(), print);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：
  Total time elapsed : 1 us
  Total time elapsed : 12391 us</p>

<p>  ps: DebugUtility.h  大家可以从<a href="https://github.com/timbao/material.git/utility">https://github.com/timbao/material.git/utility</a>取得。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/07/07/stdvector%20%E4%B8%A4%E7%A7%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E6%AF%94%E8%BE%83/'>http://timbao.github.io/blog/2013/07/07/stdvector%20%E4%B8%A4%E7%A7%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E6%AF%94%E8%BE%83/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gvim Use Wmctrl in Ubuntu]]></title>
    <link href="http://timbao.github.io/blog/2013/06/21/gvim%20use%20wmctrl%20in%20ubuntu/"/>
    <updated>2013-06-21T03:35:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/06/21/gvim use wmctrl in ubuntu</id>
    <content type="html"><![CDATA[<p>  Use the wmctrl tools could maximize the windows of gvim in ubuntu. But I find a small issue for that.</p>

<p>  Here is the wrong script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if has("win32")
</span><span class='line'>    au GUIEnter * simalt ~x
</span><span class='line'>else
</span><span class='line'>    au GUIEnter * call MaximizeWindow()
</span><span class='line'>endif
</span><span class='line'>function! MaximizeWindow()
</span><span class='line'>    silent !wmctrl -r :ACTIVE: -b add, maximized_vert,maximized_horz
</span><span class='line'>endfunction</span></code></pre></td></tr></table></div></figure>


<p>   You could see that between &ldquo;,&rdquo; and &ldquo;maximized_vert&rdquo; on line 8, there is a blank. It&rsquo;s the reason why the script can&rsquo;t works. So I remove the blank and it woks fine. So strange, because this scripts works well on my mac mini.</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/06/21/gvim%20use%20wmctrl%20in%20ubuntu/'>http://timbao.github.io/blog/2013/06/21/gvim%20use%20wmctrl%20in%20ubuntu/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Terminal in Vim]]></title>
    <link href="http://timbao.github.io/blog/2013/04/11/How%20to%20use%20Terminal%20in%20Vim/"/>
    <updated>2013-04-11T05:14:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/04/11/How to use Terminal in Vim</id>
    <content type="html"><![CDATA[<p>   这篇文章虽然叫做“如何在Vim中使用Terminal”，但是我这里要说的是在Windows下使用。</p>

<ul>
<li>OS： Windows 8 64bit</li>
<li>Plugin：ConqueTerm.vim （该插件是利用socket与真正的terminal进行通信来操作terminal command的。插件是使用python写的）</li>
<li>Python：2.7</li>
<li>Vim：7.3</li>
</ul>


<p>  在我的Linux下使用ConqueTerm一点问题都没有，非常好用，我的32位的Window7 上面也没有问题，只有在64位windows 8工作机上才会出现无法在vim中找到python接口。也就是说 echo has(&lsquo;python&rsquo;) = 0。通过查看vim的verison，发现已经打开了python/dyn。这个问题一连搞了一天也没有解决，果断放弃。这段时间vim的学习又有了突破，才又想起解决这个问题，通过大量的google search，终于在stackflow上面看到某人也有类似的问题，解决方法也是让我没有想到，重装vim或者python？为什么呢？原来是版本不匹配，我的机器安装的是64位的python，而vim确是32位的，果断下载一个64位的Vim，重新测试。OK，一切正常！</p>

<p>  通过这个问题，我的收获就是当一个问题陷入死胡同的时候，不应该去放弃；可以暂时先放下，调整下心情状态，或者过段时间再来解决，很有可能就会柳暗花明又一村！</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/04/11/How%20to%20use%20Terminal%20in%20Vim/'>http://timbao.github.io/blog/2013/04/11/How%20to%20use%20Terminal%20in%20Vim/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pasting Code With Syntax Coloring in Emails Use VIM]]></title>
    <link href="http://timbao.github.io/blog/2013/04/09/Pasting%20code%20with%20syntax%20coloring%20in%20emails%20use%20VIM/"/>
    <updated>2013-04-09T05:24:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/04/09/Pasting code with syntax coloring in emails use VIM</id>
    <content type="html"><![CDATA[<p>  今天跟T又学了一招，当邮件中包含code时，可以将code转换为html格式再发送，这样既整齐，又美观！不过T使用Emacs来制作的，偶Emacs不会，想用VIM来实现类似的功能，上网找到了这篇文章，原来VIM早就有了这种插件了。看来是我out了，要学习的东西还是太多啊！抓紧时间，持续学习，每天进步一点点，累计起来也是非常巨大的。就像最近微薄中有个公式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.01^365=37.78
</span><span class='line'>0.99^365=0.0255</span></code></pre></td></tr></table></div></figure>


<p>  每天一点，一年后的变化差距有多大啊！！！！</p>

<p>  <a href="http://vim.wikia.com/wiki/Pasting_code_with_syntax_coloring_in_emails">Address</a></p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/04/09/Pasting%20code%20with%20syntax%20coloring%20in%20emails%20use%20VIM/'>http://timbao.github.io/blog/2013/04/09/Pasting%20code%20with%20syntax%20coloring%20in%20emails%20use%20VIM/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读代码的方法]]></title>
    <link href="http://timbao.github.io/blog/2013/03/13/%E9%98%85%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <updated>2013-03-13T06:16:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/03/13/阅读代码的方法</id>
    <content type="html"><![CDATA[<p>  过完年，工作有所调整，一下子忙了起来，要去接触全新的一块内容，最近一段时间是不停的trainings、read documents、watch codes。尽管每天都非常忙，回到家后还要坚持study English， 练习听力（因为每周要跟美国那边开会，所以英语听说已经是非常迫在眉睫了！）还要坚持锻炼身体，毕竟好身体是所有这些的前提。
  先说说每天的时间安排吧：</p>

<ul>
<li>9：00 &mdash; 到公司后，一边吃早餐，一遍浏览下新闻和微博。</li>
<li>9：30 &mdash; 开始看文档和代码。</li>
<li>12：00 &mdash; 午饭</li>
<li>1：00  &mdash;继续看代码和文档。</li>
<li>2：00 &mdash;有可能有培训。</li>
<li>6：00 &mdash; 下班回家</li>
<li>9：00 &mdash; 听英语（看网易公开课或者是美剧，无字幕）训练英语（《千万不要学英语》中学来的方法）</li>
<li>10：00 &mdash; 仰卧起坐或者俯卧撑锻炼。</li>
</ul>


<p>  目前的问题是，看代码的效率比较低，注意力集中基本在30分钟左右，而且没有什么条理。培训的内容加上自学的内容太多会导致有很多遗忘，或者是没有深入下去，过段时间又忘了。</p>

<p>  今天抽出了一点时间好好思考了下到底应该如何去学习包括看代码才是高效的呢？</p>

<p>  首先就是要有个整体的计划，虽然计划不如变化快，但大体方向不能变太大。</p>

<p>  其次对代码要先总体再细节的看，1）将整体功能和单元文件都熟悉，包括大概流程；2）将代码划分几个部分（例如我从纵向区分把接口按照调用顺序从上到下进行分类），这点得益于代码命名的比较规范 3）一部分一部分看，看完后要对自己问问题，这点最重要，只有通过问题才能了解自己是否掌握了。这点我也是在训练中。</p>

<p>  最后，要及时总结和记录，这样利于回顾和复习。这点我做的不是特别好。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/03/13/%E9%98%85%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/'>http://timbao.github.io/blog/2013/03/13/%E9%98%85%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Effective C++读书笔记19]]></title>
    <link href="http://timbao.github.io/blog/2013/01/27/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B019/"/>
    <updated>2013-01-27T01:51:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/01/27/More Effective C++读书笔记19</id>
    <content type="html"><![CDATA[<h2>Item 21：通过重载避免隐式类型转换</h2>

<pre><code>如果是自定义类型进行隐式的类型转换，肯定会调用构造和析构函数，这样就一定会有一定的开销，那么如何避免这类隐式类型转换呢？21小节给出一个方式就是通过重载函数避免进行隐式类型转换。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">class</span> <span class="nc">UInt</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">UInt</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="k">const</span> <span class="n">UInt</span><span class="o">&amp;</span> <span class="n">lrs</span><span class="p">,</span> <span class="k">const</span> <span class="n">UInt</span><span class="o">&amp;</span> <span class="n">hrs</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">UInt</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>在计算b+10的时候，编译器会将10隐式的转为UInt类型进行计算，这种情况下可以通过重载操作法来避免出现隐式转换的开销。当然是必要时候才会采取这种方法，如果不是性能瓶颈，那么有可能造成重载函数过多，而维护起来会很不方便。

注意一种情况const UPInt operator+(int lhs, int rhs);   这种情况是错误的。在C++中有一条规则是每一个重载的operator必须带有一个用户定义类型（user-defined type）的参数。
</code></pre>

<h2>Item 22：考虑用运算符的赋值形式（op=）取代其单独形式（op）</h2>

<pre><code>在这一小节我个人来说学到了一点，那就是操作符重载中尽量能让实现能“集成”，不要所有实现都重新实现一遍，这样可以减少维护费用。
</code></pre>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/01/27/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B019/'>http://timbao.github.io/blog/2013/01/27/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B019/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Effective C++读书笔记18]]></title>
    <link href="http://timbao.github.io/blog/2013/01/20/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B018/"/>
    <updated>2013-01-20T00:29:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/01/20/More Effective C++读书笔记18</id>
    <content type="html"><![CDATA[<h2>Item 20：协助完成返回值优化</h2>

<p>  返回对象时的开销会比较大，会调用对象的构造和析构函数，但是当一个函数必须要返回对象时，这种构造和析构造成的开销是无法消除的。那么还能优化么？
  以某种方法返回对象，能让编译器消除临时对象的开销，这样编写函数通常是很普遍的。这种技巧是返回constructor argument而不是直接返回对象。你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">const</span> <span class="n">Rational</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="k">const</span> <span class="n">Rational</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rational</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Rational</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">numerator</span><span class="p">()</span> <span class="o">*</span> <span class="n">rhs</span><span class="p">.</span><span class="n">numerator</span><span class="p">(),</span>
</span><span class='line'>                  <span class="n">lhs</span><span class="p">.</span><span class="n">denominator</span><span class="p">()</span> <span class="o">*</span> <span class="n">rhs</span><span class="p">.</span><span class="n">denominator</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>仔细观察被返回的表达式。它看上去好象正在调用Rational的构造函数，实际上确是这样。你通过这个表达式建立一个临时的Rational对象，Rational(lhs.numerator() * rhs.numerator(),  lhs.denominator() * rhs.denominator()); 并且这是一个临时对象，函数把它拷贝给函数的返回值。返回constructor argument而不出现局部对象，这种方法还会给你带来很多开销，因为你仍旧必须为在函数内临时对象的构造和释放而付出代价，你仍旧必须为函数返回对象的构造和释放而付出代价。但是你已经获得了好处。C++规则允许编译器优化不出现的临时对象（temporary objects out of existence）。因此如果你在如下的环境里调用operator*：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Rational</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="n">Rational</span> <span class="nf">b</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">Rational</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span><span class="c1">// 在这里调用operator*</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>编译器就会被允许消除在operator*内的临时变量和operator*返回的临时变量。它们能在为目标c分配的内存里构造return表达式定义的对象。如果你的编译器这样去做，调用operator*的临时对象的开销就是零：没有建立临时对象。你的代价就是调用一个构造函数――建立c时调用的构造函数。而且你不能比这做得更好了，因为c是命名对象，命名对象不能被消除（参见条款M22）。不过你还可以通过把函数声明为inline来消除operator*的调用开销。

看完这篇突然认识到，理解编译器优化是非常重要的，对编译器了解构思，代码的效率自然有保证。路漫漫其修远兮，吾将上下而求索！
</code></pre>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/01/20/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B018/'>http://timbao.github.io/blog/2013/01/20/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B018/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Effective C++读书笔记17]]></title>
    <link href="http://timbao.github.io/blog/2013/01/17/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B017/"/>
    <updated>2013-01-17T17:55:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/01/17/More Effective C++读书笔记17</id>
    <content type="html"><![CDATA[<p>  这里提到一个概念Over-eager evaluation，可以理解为超前计算，主要有两种方法caching和 prefething，都是以空间换时间来提高效率。</p>

<p>  看到这章，让我想起了我以前做的两个项目，一个是给某直辖市做的全市联网XX系统，一个是给某发电厂做的监控环境系统。</p>

<p>  1.全市联网系统，由于数据量非常大，导致的性能瓶颈就是每次查询数据库都会很慢，导致用户体验非常不好，而实际情况是数据库中的内容并不是总是频繁改变，所以我采用了catching方式，将数据库中内容预存到内存中，每次读取先从catch中查询，如果有就直接返回，如果没有则再查询数据库，通过这种方式，大大提高了查询效率，这是一个典型的用空间换取时间的方案。</p>

<p>   2.发电厂的监控项目是一个需要频繁查询的系统，要实时的更新系统数据，并计算出当时的最大值，最小值和平均值，还要将采集到的数据记录到数据库中以备查询。这里没最麻烦的是计算max，min和ave，因为这些值会根据时长不停的变化，每次查询时都要重新计算，有可能还需要查询数据库，这就导致程序运行非常慢，当时提出一个方案是采用catching方式，提前计算出来结果，并实时更新这些结果，需要的时候，可以直接取。这个方案实施起来非常麻烦，所以我改了下将每次采集的数值计算好，将这些值直接保存到数据库中，然后每次查询都直接读取，效率提高了很多。这种方式可以归结为上述的prefetching方式里。</p>

<p class='post-footer'>
             原文地址:
             <a href='http://timbao.github.io/blog/2013/01/17/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B017/'>http://timbao.github.io/blog/2013/01/17/More%20Effective%20C++%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B017/</a><br/>
             written by <a href='http://timbao.github.io'>Tim Bao</a>
             &nbsp;posted at <a href='http://timbao.github.io'>http://timbao.github.io</a>
             </p>

]]></content>
  </entry>
  
</feed>
