<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cstring (string.h)函数介绍 | 逝水流年]]></title>
  <link href="http://timbao.github.io/blog/categories/cstring-string-dot-h-han-shu-jie-shao/atom.xml" rel="self"/>
  <link href="http://timbao.github.io/"/>
  <updated>2014-12-23T17:50:04+08:00</updated>
  <id>http://timbao.github.io/</id>
  <author>
    <name><![CDATA[Tim Bao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字符串相关函数整理]]></title>
    <link href="http://timbao.github.io/blog/2014/10/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <updated>2014-10-30T00:34:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/10/30/字符串相关函数整理</id>
    <content type="html"><![CDATA[<h2>string.h 中字符串相关函数</h2>

<h3>按功能分类:</h3>

<ul>
<li>字符串连接:

<ul>
<li>strcat : char<em> strcat(char</em> destination, const char* source);</li>
<li>strncat : char<em> strcat(char</em> destination, const char* source, size_t num);

<blockquote><p>cat 意思是catenate，连接的意思。
strnca 是strcat的安全版本，可以防止越界。
从定义上可以看出是将带const的字符串连接到不带const的字符串上。</p></blockquote></li>
</ul>
</li>
<li>字符/字符串查找:

<ul>
<li>strchr : char<em> strchr(const char</em> str, int character); char<em> strchr(char</em> str, int character);

<blockquote><p>查找字符character在str中第一次出现的位置，返回一个指针指向该字符到字符串结尾。
由于&#8217;\0&#8217;也是字符串的一部分，故该函数也可以查找结束符。
chr意思应该是character。</p></blockquote></li>
<li>strrchr : char<em> strchr(const char</em> str, int character); char<em> strchr(char</em> str, int character);

<blockquote><p>最后一次出现的位置。 &lsquo;r&#8217;应该是right的意思，也就是从右开始搜索。</p></blockquote></li>
<li>strpbrk : const char<em> strpbrk(const char</em> str1,const char<em> str2); char</em> strpbrk(char<em> str1,const char</em> str2);

<blockquote><p>查找str2中任意字符在str1中第一次出现的位置，返回从整个位置到str1最后的字符串。不包含结束符。</p></blockquote></li>
<li>strcspn : size_t strcspn(const char<em> str1, const char</em> str2);

<blockquote><p>返回的是str1第一次出现str2中任意字符的位置。搜索包含null结束符，所以函数可以返回str1字符串的长度当没有任何匹配的时候。</p></blockquote></li>
<li>strstr : const char<em> strstr(const char</em> str1, const char<em> str2); char</em> strstr(char<em> str1, const char</em> str2);

<blockquote><p>匹配完整字符串</p></blockquote></li>
</ul>
</li>
<li>字符串比较:

<ul>
<li>strcmp: int strcmp(const char<em> str1, const char</em> str2);</li>
<li>strncmp: int strcmp(const char<em> str1, const char</em> str2, size_t num);</li>
<li>strcoll: int strcoll(const char<em> str1, const char</em> str2);

<blockquote><p>根据LC_COLIATE比较str1和str2。</p></blockquote></li>
</ul>
</li>
<li>字符串拷贝:

<ul>
<li>strcpy : char<em> strcpy(char</em> destination, const char* source);</li>
<li>strncpy : char<em> strcpy(char</em> destination, const char* source, size_t num);

<blockquote><p>拷贝source到destination中去。遇到&#8217;\0&#8217;停止copy。</p></blockquote></li>
</ul>
</li>
<li>获取字符串长度:

<ul>
<li>strlen: size_t strlen(const char* str);</li>
</ul>
</li>
<li>拆分字符串:

<ul>
<li>strtok: char<em> strtok(char</em> str, const char* delimiters);

<blockquote><p>tok的意思是token，该函数就是将str根据delimiter拆分。</p></blockquote></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strxfrm函数]]></title>
    <link href="http://timbao.github.io/blog/2012/04/28/strxfrm%E5%87%BD%E6%95%B0/"/>
    <updated>2012-04-28T19:24:00+08:00</updated>
    <id>http://timbao.github.io/blog/2012/04/28/strxfrm函数</id>
    <content type="html"><![CDATA[<p>原型</p>

<pre><code>size_t strxfrm ( char * destination, const char * source, size_t num );
</code></pre>

<p>功能：</p>

<p>根据num长度拷贝前num个字符到目的字符串中，并返回源字符串长度。</p>

<p>同时，该函数还可以自作为返回字符串长度，这时num=0，destination允许传入NULL。</p>

<p>参数：</p>

<p>destination 指向目的字符数组的指针，当num为0时，可以传NULL。</p>

<p>source 要拷贝的源字符串，以‘\0’结尾。</p>

<p>num 最大要拷贝到目的数组的字符的长度。</p>

<p>返回值：</p>

<p>返回source字符串的长度，不包含‘\0’。</p>

<pre><code>#include &lt;cstring&gt;;
#include &lt;iostream&gt;;
#include &lt;windows.h&gt;;
int main(int argc, char* argv[])
{
    char* source = "1234567890 abc";
    char des[100];
    size_t len = strxfrm(des, source, 50);
    std::cout &lt;&lt; "len:" &lt;&lt; len &lt;&lt;std::endl;
    std::cout &lt;&lt; "des:" &lt;&lt; des &lt;&lt;std::endl;
    return 0;
}
</code></pre>

<p>output:
len:14
des:1234567890 abc</p>

<p>这里举这个例子要说明的是num长度大于源字符串长度的原因，涉及到strxfrm函数的具体实现了。</p>

<pre><code>strncpy(_string1, _string2, _count);
return strlen(_string2);
</code></pre>

<p>vs平台下该函数的实现非常简单，除了必要的验证外，只是调用了同是cstring的库函数中的两个基本函数。这也说明了为什么num长度超过源串后为什么没有问题，因为strncpy函数自动截取字符串到&#8217;\0&#8217;。</p>
]]></content>
  </entry>
  
</feed>
