<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 重构技术 | My Octopress Blog]]></title>
  <link href="http://timbao.github.io/blog/categories/zhong-gou-ji-zhu/atom.xml" rel="self"/>
  <link href="http://timbao.github.io/"/>
  <updated>2014-12-19T17:47:35+08:00</updated>
  <id>http://timbao.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈程序员应该如何完成任务]]></title>
    <link href="http://timbao.github.io/blog/2012/09/17/%E8%B0%88%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E4%BB%BB%E5%8A%A1/"/>
    <updated>2012-09-17T19:11:00+08:00</updated>
    <id>http://timbao.github.io/blog/2012/09/17/谈程序员应该如何完成任务</id>
    <content type="html"><![CDATA[<p>  这两天看了一篇关于重构的博客，结合前段时间看完的《重构》，对程序员的工作行为有一点点感悟，记录下来跟大家分享一下。
  如果老大给你分派了一个任务，在原系统中添加某某功能。作为一名员工，你需要做的就是将功能没有BUG的，高效的实现就可以了，并不需要关心系统其他的部分代码，也有可能你在添加功能的时候阅读了一部分原有代码，也发现原有代码的一些问题，比如效率低，结构差等等，可是可能由于各种理由（工期紧，能良好运行，客户认可等等）并没有对这些问题进行修改，以后也不会对其进行修改。OK，可以说你按时，保质保量的完成了任务，还有可能得到表扬，但是作为一名程序员来说，你并不合格！同时你也丧失了一次自我提升的机会！
  我决定作为程序员，不仅要对自己的程序负责，也要对产品的其他程序负责，既然看到了问题，就应该修改，或者记录下来，提供给决策者来进行后期重构或者升级时的修改项。如果是小改动，那么应该花费少量的时间直接修改过来。虽然花费了些许时间，但是对于产品来说，可能会有很大的性能提升，或者用户体验得到大大的改进，或者为以后维护提供了大大的便利；对于个人来讲也是对个人能力的展现，让后来维护人员对你的一种‘膜拜’。
  所以，我认为简单的完成任务并不可取；在完成任务的同时，你应该可以获得更多东西！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《重构》读书笔记一]]></title>
    <link href="http://timbao.github.io/blog/2012/07/21/%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <updated>2012-07-21T06:25:00+08:00</updated>
    <id>http://timbao.github.io/blog/2012/07/21/《重构》读书笔记一</id>
    <content type="html"><![CDATA[<p>  一、重构之前一定要对原有代码有一套可靠的测试机制，并且测试要有自我检测能力。
  第六章主要是讲的最简单的重构方法，就是对函数的重构。重构的目的就是要让函数更容易理解，思路更清晰。个人觉得重构的目的主要是针对开发者，能让维护者更容易理解而已。对函数的效率没有太多帮助，用作者的话来说就是应该放到优化中去做。有了易理解的函数，清晰的思路，优化起来那是事半功倍！
  几个比较重要的重构的小方法：
  1、Extract Methord：提取函数。将大函数分解为多个独立功能的小函数。小函数更容易阅读和理解。
  2、Replace Temp with Quary：用查询函数替换局部变量。过多的局部变量会影响阅读。
  3、Replace Methord with Methord Object：用函数对象替换函数。</p>
]]></content>
  </entry>
  
</feed>
