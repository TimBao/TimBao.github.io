<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 记事 | 逝水流年]]></title>
  <link href="http://timbao.github.io/blog/categories/ji-shi/atom.xml" rel="self"/>
  <link href="http://timbao.github.io/"/>
  <updated>2015-02-10T09:00:32+08:00</updated>
  <id>http://timbao.github.io/</id>
  <author>
    <name><![CDATA[Tim Bao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[工欲善其事，必先利其器]]></title>
    <link href="http://timbao.github.io/blog/2014/11/06/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    <updated>2014-11-06T00:07:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/11/06/工欲善其事，必先利其器</id>
    <content type="html"><![CDATA[<blockquote><p>背景：最近一直在写些python脚本，同事review完发现一处地方不符合pep8规范，建议修改。</p></blockquote>

<p>虽说是一处小小的改动，只要一分钟就可以搞定。但是我想下次会不会还犯这种错误？如何能一劳永逸解决这个问题？由于本人用vim作为python IDE，所以就去google了下是否有对python规范检查的插件，结果果然如我所料！万能的vim插件无所不能啊！因为早先已经用了syntastic插件检测语法，所以还是选择使用它来搭配pep8检测python规范。具体方法网上很多，这里不详细描述，感兴趣的可以自行google。</p>

<p>花了几个小时搞定好配置后，果然效果不错！为后面大量代码改动节约了不少时间，而且代码质量也提高不少！花费时间完全值得！这就是所谓的磨刀不误砍柴工。
有对vim感兴趣的同学，可以去我的<a href="https://github.com/TimBao/dotvim">github</a>看看我的配置。欢迎交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员不是操作工]]></title>
    <link href="http://timbao.github.io/blog/2014/03/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E6%98%AF%E6%93%8D%E4%BD%9C%E5%B7%A5/"/>
    <updated>2014-03-09T18:35:00+08:00</updated>
    <id>http://timbao.github.io/blog/2014/03/09/程序员不是操作工</id>
    <content type="html"><![CDATA[<blockquote><p>故事的背景是这样的，我的一个朋友跟我聊天中说到他前几天加班到凌晨，手都疼了。我就问问加班干什么呢？他说就光<code>Ctrl-C</code>和<code>Ctrl-V</code>的弄了3000多次！我的天啊！怪不得手指头都疼了呢！</p></blockquote>

<p>  真正的程序员真的不是代码工人，是靠脑力而不是靠体力，是赚智慧的钱，而不是赚苦力的钱。那么真正的程序员应该怎么做呢？</p>

<ul>
<li><p>避免重复劳动，遇到类似需要大量<code>Ctrl-C</code>和<code>Ctrl-V</code>的情况，一定是程序架构出了问题，该做的公司是要思考为什么会出现这种不合理的情况？要从根本上杜绝这类情况的出现。</p></li>
<li><p>善于利用脚本，脚本语言的简单和易用性是程序员工作中不可缺少的好帮手。善于用脚本创造各种工具来帮助程序员提高工作效率。上述情况完全可以写个脚本来做这些重复的工作。而且后期可以将脚本完善，做成个通用的工具，分享给同事，即利己也利团队，更可以增加你在领导眼里的不可替代性。</p>

<p>现在的程序员门槛已经非常低了，但是不能因为门槛低就对自己要求降低。程序员不是码农，不是代码蓝领！我们是在改变世界，是高科技工程师！让我们做真正的程序员，而不是代码操作工！</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对比国内外的git开源项目]]></title>
    <link href="http://timbao.github.io/blog/2013/11/01/%E5%AF%B9%E6%AF%94%E5%9B%BD%E5%86%85%E5%A4%96%E7%9A%84git%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <updated>2013-11-01T04:53:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/11/01/对比国内外的git开源项目</id>
    <content type="html"><![CDATA[<p> 最近看到CSDN也有了自己的code(git)，而且开源中国比之还早有git@ocs，这两个基本是跟github差不多，或者说是copy github。这里不说他们到底是谁copy谁，只单单谈谈里面到项目。浏览里一边C/C++的项目，发现CSDN到大多说都是垃圾项目，而且基本都不怎么维护，着实让人失望。相比ocs到还好一点，但多数项目也是为了凑数，维护人员基本都没有维护，真是很可惜。开源在中国这个土壤上说的比做的好，唱的比干到好！失望！失望！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pasting Code With Syntax Coloring in Emails Use VIM]]></title>
    <link href="http://timbao.github.io/blog/2013/04/09/Pasting%20code%20with%20syntax%20coloring%20in%20emails%20use%20VIM/"/>
    <updated>2013-04-09T05:24:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/04/09/Pasting code with syntax coloring in emails use VIM</id>
    <content type="html"><![CDATA[<p>  今天跟T又学了一招，当邮件中包含code时，可以将code转换为html格式再发送，这样既整齐，又美观！不过T使用Emacs来制作的，偶Emacs不会，想用VIM来实现类似的功能，上网找到了这篇文章，原来VIM早就有了这种插件了。看来是我out了，要学习的东西还是太多啊！抓紧时间，持续学习，每天进步一点点，累计起来也是非常巨大的。就像最近微薄中有个公式：
<code>
1.01^365=37.78
0.99^365=0.0255
</code></p>

<p>  每天一点，一年后的变化差距有多大啊！！！！</p>

<p>  <a href="http://vim.wikia.com/wiki/Pasting_code_with_syntax_coloring_in_emails">Address</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读代码的方法]]></title>
    <link href="http://timbao.github.io/blog/2013/03/13/%E9%98%85%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <updated>2013-03-13T06:16:00+08:00</updated>
    <id>http://timbao.github.io/blog/2013/03/13/阅读代码的方法</id>
    <content type="html"><![CDATA[<p>  过完年，工作有所调整，一下子忙了起来，要去接触全新的一块内容，最近一段时间是不停的trainings、read documents、watch codes。尽管每天都非常忙，回到家后还要坚持study English， 练习听力（因为每周要跟美国那边开会，所以英语听说已经是非常迫在眉睫了！）还要坚持锻炼身体，毕竟好身体是所有这些的前提。
  先说说每天的时间安排吧：</p>

<ul>
<li>9：00 &mdash; 到公司后，一边吃早餐，一遍浏览下新闻和微博。</li>
<li>9：30 &mdash; 开始看文档和代码。</li>
<li>12：00 &mdash; 午饭</li>
<li>1：00  &mdash;继续看代码和文档。</li>
<li>2：00 &mdash;有可能有培训。</li>
<li>6：00 &mdash; 下班回家</li>
<li>9：00 &mdash; 听英语（看网易公开课或者是美剧，无字幕）训练英语（《千万不要学英语》中学来的方法）</li>
<li>10：00 &mdash; 仰卧起坐或者俯卧撑锻炼。</li>
</ul>


<p>  目前的问题是，看代码的效率比较低，注意力集中基本在30分钟左右，而且没有什么条理。培训的内容加上自学的内容太多会导致有很多遗忘，或者是没有深入下去，过段时间又忘了。</p>

<p>  今天抽出了一点时间好好思考了下到底应该如何去学习包括看代码才是高效的呢？</p>

<p>  首先就是要有个整体的计划，虽然计划不如变化快，但大体方向不能变太大。</p>

<p>  其次对代码要先总体再细节的看，1）将整体功能和单元文件都熟悉，包括大概流程；2）将代码划分几个部分（例如我从纵向区分把接口按照调用顺序从上到下进行分类），这点得益于代码命名的比较规范 3）一部分一部分看，看完后要对自己问问题，这点最重要，只有通过问题才能了解自己是否掌握了。这点我也是在训练中。</p>

<p>  最后，要及时总结和记录，这样利于回顾和复习。这点我做的不是特别好。</p>
]]></content>
  </entry>
  
</feed>
